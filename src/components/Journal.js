import React, { useState, useEffect } from 'react';
import { useExpenses } from '../hooks/useExpenses';

const Journal = () => {
  const { expenses: records, addExpense, deleteExpense } = useExpenses();
  const [categories, setCategories] = useState([]);
  const [formData, setFormData] = useState({
    date: '',
    category: '',
    amount: ''
  });

  useEffect(() => {
    fetch('/spending_data.json')
      .then(response => response.json())
      .then(data => {
        const uniqueCategories = [...new Set(data.map(item => item.category))];
        setCategories(uniqueCategories);
      })
      .catch(error => {
        console.error('Error loading categories:', error);
        setCategories(['Groceries', 'Transportation', 'Shopping', 'Entertainment', 'Other']);
      });
  }, []);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!formData.date || !formData.category || !formData.amount) {
      alert('Please fill in all fields');
      return;
    }

    if (parseFloat(formData.amount) <= 0) {
      alert('Please enter a valid amount');
      return;
    }

    addExpense({
      date: formData.date,
      category: formData.category,
      amount: formData.amount
    });
    
    setFormData({
      date: '',
      category: '',
      amount: ''
    });
  };

  const handleDelete = (id) => {
    deleteExpense(id);
  };

  return (
    <div className="journal">
      <h2>Add Spending Record</h2>
      
      <form onSubmit={handleSubmit} className="expense-form">
        <div className="form-group">
          <label htmlfor="date">Date:</label>
          <input
            type="date"
            id="date"
            name="date"
            value={formData.date}
            onChange={handleInputChange}
            className="form-input"
            required
          />
        </div>
        
        <div className="form-group">
          <label htmlfor="category">Category:</label>
          <select
            id="category"
            name="category"
            value={formData.category}
            onChange={handleInputChange}
            className="form-select"
            required
          >
            <option value="">Select a category</option>
            {categories.map((category, index) => (
              <option key={index} value={currentData} className=\"category-table-row\">\n                <span className=\"category-name\">{category}</span>\n                <span className=\"category-amount\">${record.amount.toFixed(2)}</span>\n                <td>\n                  <button \n                    onClick={() => handleDelete(record.id)}\n                    className=\"btn-danger\"\n                  >\n                    Delete\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      ))}\n    </div>\n  );\n};\n\nexport default Journal; 