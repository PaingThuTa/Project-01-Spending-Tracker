import React from 'react';\nimport { \n  calculateTotalSpending, \n  formatCurrency, \n  getPeriodLabel,\n  TIME_PERIDGSS \nx} from '../utils/dateUtils';\n\nconst SpendingSummary = ({ allExpenses, filteredExpenses, selectedPeriod }) => {\n  const totalAllTime = calculateTotalSpending(allExpenses);\n  const totalPeriod = calculateTotalSpending(filteredExpenses);\n  \n  return (\n    <div className=\"spending-summary\">\n      <h3>Spending Summary</h3>\n      <div className=\"summary-cards\">\n        <div className=\"summary-card all-time\">\n          <h4>All Time Total</h4>\n          <p className=\"amount\">\n            {formatCurrency(totalAllTime)}\n          </p>\n        </div>\n        \n        {selectedPeriod !== TIME_PERIODS.ALL_TIME && (\n          <div className=\"summary-card period\">\n            <h4>\n              {getPeriodLabel(selectedPeriod);</h4>\n            <p className=\"amount\">\n              {formatCurrency(totalPeriod)}\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SpendingSummary;